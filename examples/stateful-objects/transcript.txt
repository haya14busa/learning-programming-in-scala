/*
 * Copyright (C) 2007-2008 Artima, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Automatically generated Scala interpreter transcript from:
 *
 * Programming in Scala (First Edition, Version 6)
 * by Martin Odersky, Lex Spoon, Bill Venners
 *
 * http://booksites.artima.com/programming_in_scala
 */


scala>   class BankAccount {
       
           private var bal: Int = 0
       
           def balance: Int = bal
       
           def deposit(amount: Int) {
             require(amount > 0)
             bal += amount
           }
       
           def withdraw(amount: Int): Boolean = 
             if (amount > bal) false
             else {
               bal -= amount
               true
             }
         } 

defined class BankAccount

scala> val account = new BankAccount
account: BankAccount = BankAccount@321ea24

scala> account deposit 100

scala> account withdraw 80
res1: Boolean = true

scala>  account withdraw 80
res2: Boolean = false

scala>   class Thermometer {
       
           var celsius: Float = _
       
           def fahrenheit = celsius * 9 / 5 + 32
           def fahrenheit_= (f: Float) {
             celsius = (f - 32) * 5 / 9
           }
           override def toString = fahrenheit +"F/"+ celsius +"C"
         }

defined class Thermometer

scala> val t = new Thermometer
t: Thermometer = 32.0F/0.0C

scala> t.celsius = 100

scala> t
res3: Thermometer = 212.0F/100.0C

scala> t.fahrenheit = -40

scala> t
res4: Thermometer = -40.0F/-40.0C

